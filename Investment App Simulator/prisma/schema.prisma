generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "windows", "darwin", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  id       Int              @id @default(autoincrement())
  name     String
  statusId Int
  status   Status           @relation(fields: [statusId], references: [id])
  persons  TaskAssignment[]
}

model Status {
  id    Int    @id @default(autoincrement())
  text  String @unique
  tasks Task[]
}

model Person {
  id     Int              @id @default(autoincrement())
  email  String           @unique
  name   String
  avatar String?
  tasks  TaskAssignment[]
}

model TaskAssignment {
  taskId     Int
  personId   Int
  assignedAt DateTime @default(now())
  person     Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@id([taskId, personId], name: "assignmentId")
}

model Stock {
  stock_id        Int               @id @default(autoincrement())
  symbol          String            @unique @db.VarChar(10)
  sector          String?           @db.VarChar(100)
  company_id      Int?
  change          Int?
  favoriteStock   FavoriteStock[]
  hist_prices     HistPrice[]
  limitOrder      LimitOrder[]
  company         Company?          @relation(fields: [company_id], references: [id])
  trading         Trade[]
  intradayPrice2  IntradayPrice2[]
  intradayPrice3  IntradayPrice3[]
  StopMarketOrder StopMarketOrder[]
  StopLimitOrder  StopLimitOrder[]
  contracts       OptionContract[]

  @@index([symbol])
}

model FavoriteStock {
  id      Int   @id @default(autoincrement())
  userId  Int
  stockId Int
  stock   Stock @relation(fields: [stockId], references: [stock_id], onDelete: Cascade)
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, stockId])
}

model HistPrice {
  price_id    Int      @id @default(autoincrement())
  stock_id    Int
  date        DateTime
  open_price  Decimal? @db.Decimal(10, 2)
  high_price  Decimal? @db.Decimal(10, 2)
  low_price   Decimal? @db.Decimal(10, 2)
  close_price Decimal  @db.Decimal(10, 2)
  volume      BigInt?
  stock       Stock    @relation(fields: [stock_id], references: [stock_id])

  @@unique([stock_id, date])
}

model LimitOrder {
  id         Int      @id @default(autoincrement())
  userId     Int
  stockId    Int
  quantity   Int
  limitPrice Decimal  @db.Decimal(10, 2)
  orderType  String
  timeframe  String   @default("gtc")
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  stock      Stock    @relation(fields: [stockId], references: [stock_id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Trade {
  id          Int      @id @default(autoincrement())
  userId      Int?
  stockId     Int
  quantity    Int
  price       Decimal  @db.Decimal(10, 2)
  totalAmount Decimal  @db.Decimal(10, 2)
  tradeType   String
  tradeDate   DateTime @default(now())
  stock       Stock    @relation(fields: [stockId], references: [stock_id])
  user        User?    @relation(fields: [userId], references: [id])
}

model News {
  id          Int           @id @default(autoincrement()) @map("news_id")
  apiId       Int           @unique
  headline    String
  summary     String?
  url         String
  source      String?
  datetime    DateTime?
  categoryId  Int? // new field for category
  category    NewsCategory? @relation(fields: [categoryId], references: [id])
  views       Int           @default(0) // <-- add this
  bookmarks   Bookmark[]
  NewsComment NewsComment[]
  NewsLike    NewsLike[]
}

model Bookmark {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  news   News @relation(fields: [newsId], references: [id])
  newsId Int

  @@unique([userId, newsId]) // Prevent duplicate bookmarks
}

model BlogPost {
  id         Int      @id @default(autoincrement())
  user_id    Int
  title      String
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  user        User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  BlogComment BlogComment[]
}

model BlogComment {
  id         Int      @id @default(autoincrement())
  post_id    Int
  user_id    Int
  comment    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  post BlogPost @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model User {
  id                          Int                           @id @default(autoincrement())
  email                       String                        @unique
  password                    String?
  wallet                      Int                           @default(100000)
  googleId                    String?
  microsoftId                 String?
  createdAt                   DateTime                      @default(now())
  referredById                Int?
  status                      String                        @default("Sufficient Money")
  userReferralLink            String?                       @unique
  username                    String                        @unique
  updatedAt                   DateTime                      @updatedAt
  verified                    Boolean                       @default(false)
  verifyToken                 String?
  verifyExpires               DateTime?
  name                        String?
  phoneNumber                 Int?
  resetCode                   String?
  resetExpires                DateTime?
  failedLogins                Int                           @default(0)
  lockUntil                   DateTime?
  BlogComment                 BlogComment[]
  BlogPost                    BlogPost[]
  Comment                     Comment[]
  FavoriteApi                 FavoriteApi[]
  favoriteStocks              FavoriteStock[]
  Goal                        Goal[]
  limitOrders                 LimitOrder[]
  RedeemBy                    RedeemBy[]
  referrals                   Referral[]                    @relation("UserReferrals")
  referralUsages              ReferralUsage[]
  trading                     Trade[]
  referredBy                  Referral?                     @relation("UserReferredBy", fields: [referredById], references: [id], onDelete: Cascade)
  bookmarks                   Bookmark[]
  NewsComment                 NewsComment[]
  NewsLike                    NewsLike[]
  StopMarketOrder             StopMarketOrder[]
  StopLimitOrder              StopLimitOrder[]
  OptionTrade                 OptionTrade[]
  ScenarioParticipant         ScenarioParticipant[]
  ScenarioAttemptAnalytics    ScenarioAttemptAnalytics[]
  ScenarioPersonalBest        ScenarioPersonalBest[]
  ScenarioAttempt             ScenarioAttempt[]
  AIAdvice                    AIAdvice[]
  BlockchainTransaction       BlockchainTransaction[]
  OptionBlockchainTransaction OptionBlockchainTransaction[]
}

model Referral {
  id                  Int             @id @default(autoincrement())
  referralLink        String          @unique
  referralSignups     Int             @default(0)
  successfulReferrals Int             @default(0)
  rewardsExchanged    Int             @default(0)
  creditsEarned       Int             @default(0)
  tier                Int             @default(1)
  wallet              Int             @default(100000)
  expiresAt           DateTime?
  userId              Int?
  user                User?           @relation("UserReferrals", fields: [userId], references: [id], onDelete: Cascade)
  referralUsages      ReferralUsage[]
  referredUsers       User[]          @relation("UserReferredBy")
  ReferralBadge       ReferralBadge[]
}

model ReferralUsage {
  id            Int       @id @default(autoincrement())
  userId        Int?
  referralId    Int?
  status        String    @default("PENDING")
  creditsEarned Int       @default(0) // <-- ADD THIS
  createdAt     DateTime  @default(now())
  referral      Referral? @relation(fields: [referralId], references: [id], onDelete: Cascade)
  user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, referralId])
}

model ReferralBadge {
  id         Int      @id @default(autoincrement())
  referralId Int
  badgeName  String
  createdAt  DateTime @default(now())
  referral   Referral @relation(fields: [referralId], references: [id], onDelete: Cascade)

  @@unique([referralId, badgeName]) // Prevent duplicate badges
  @@index([referralId])
}

model Comment {
  id          Int      @id @default(autoincrement())
  userId      Int
  stockSymbol String
  content     String
  createdAt   DateTime @default(now())
  viewCount   Int      @default(0)
  User        User     @relation(fields: [userId], references: [id])

  @@index([stockSymbol])
}

model FavoriteApi {
  id     Int    @id @default(autoincrement())
  userId Int
  symbol String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NewsComment {
  id        Int      @id @default(autoincrement())
  newsId    Int
  userId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  news News @relation(fields: [newsId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([newsId])
  @@index([userId])
}

model Goal {
  id          Int      @id @default(autoincrement())
  title       String
  amount      Float
  deadline    DateTime
  createdAt   DateTime @default(now())
  description String?
  userId      Int
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RedeemBy {
  id          Int      @id @default(autoincrement())
  userId      Int
  dateOrdered DateTime @default(now())
  rewardId    Int
  cardCode    String
  reward      Reward   @relation(fields: [rewardId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([rewardId])
  @@index([userId])
}

model QuizQuestion {
  id             Int      @id @default(autoincrement())
  question       String
  options        String[]
  correct_answer Int
}

model Reward {
  id                Int        @id @default(autoincrement())
  rewardName        String
  rewardDescription String
  cost              Int
  probability       Decimal    @db.Decimal(5, 3)
  redeemedBy        RedeemBy[]
}

model NewsLike {
  id        Int      @id @default(autoincrement())
  newsId    Int
  userId    Int
  createdAt DateTime @default(now())

  news News @relation(fields: [newsId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([newsId, userId]) // prevent duplicate likes
  @@index([newsId])
  @@index([userId])
}

model NewsCategory {
  id   Int    @id @default(autoincrement())
  name String @unique
  news News[] // one-to-many relation: a category can have multiple news articles
}

model IntradayPrice2 {
  id         Int      @id @default(autoincrement())
  stockId    Int
  date       DateTime
  openPrice  Decimal? @db.Decimal(10, 2)
  highPrice  Decimal? @db.Decimal(10, 2)
  lowPrice   Decimal? @db.Decimal(10, 2)
  closePrice Decimal  @db.Decimal(10, 2)
  volume     BigInt?
  createdAt  DateTime @default(now())

  stock Stock @relation(fields: [stockId], references: [stock_id])

  @@unique([stockId, date])
  @@index([stockId])
}

model IntradayPrice3 {
  id         Int      @id @default(autoincrement())
  stockId    Int
  date       DateTime
  openPrice  Decimal? @db.Decimal(10, 2)
  highPrice  Decimal? @db.Decimal(10, 2)
  lowPrice   Decimal? @db.Decimal(10, 2)
  closePrice Decimal  @db.Decimal(10, 2)
  volume     BigInt?
  createdAt  DateTime @default(now())

  stock Stock @relation(fields: [stockId], references: [stock_id])

  @@unique([stockId, date], map: "stockId_date")
  @@index([stockId])
}

model InvestmentGuide {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  content   Json // store the structured JSON we designed above
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StopMarketOrder {
  id           Int      @id @default(autoincrement())
  userId       Int
  stockId      Int
  quantity     Int
  triggerPrice Decimal  @db.Decimal(10, 2)
  tradeType    String // <-- ADD THIS: "BUY" or "SELL"
  limitPrice   Decimal? @db.Decimal(10, 2) // only used for STOP_LIMIT
  status       String   @default("PENDING") // PENDING, EXECUTED, CANCELLED
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  stock Stock @relation(fields: [stockId], references: [stock_id], onDelete: Cascade)

  @@index([stockId])
}

model StopLimitOrder {
  id           Int      @id @default(autoincrement())
  userId       Int
  stockId      Int
  quantity     Int
  triggerPrice Decimal  @db.Decimal(10, 2)
  limitPrice   Decimal  @db.Decimal(10, 2)
  tradeType    String // "BUY" or "SELL"
  status       String   @default("PENDING") // "PENDING", "EXECUTED", "CANCELLED"
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  stock Stock @relation(fields: [stockId], references: [stock_id], onDelete: Cascade)

  @@index([stockId])
}

model Company {
  id                   Int       @id @default(autoincrement())
  symbol               String    @unique
  name                 String
  country              String?
  currency             String?
  exchange             String?
  founded              Int?
  phone                String?
  website              String?
  industry             String?
  marketCapitalization Float?
  shareOutstanding     Float?
  logo                 String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime? @updatedAt
  stock_id             Int? // <-- add this @unique @unique

  stock Stock[]

  @@index([symbol])
}

model OptionContract {
  id               Int       @id @default(autoincrement())
  stockId          Int? // optional if contract might not match an existing stock yet
  symbol           String    @unique
  name             String
  underlyingSymbol String
  rootSymbol       String
  type             String // "call" or "put"
  style            String? // e.g., "american"
  strikePrice      Float
  expirationDate   DateTime
  size             Int?
  openInterest     Int?
  openInterestDate DateTime?
  closePrice       Float?
  closePriceDate   DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt

  stock        Stock?            @relation(fields: [stockId], references: [stock_id])
  optionTrades OptionTrade[]
  histPrices   OptionHistPrice[]
}

model OptionTrade {
  id          Int      @id @default(autoincrement())
  userId      Int
  contractId  Int
  tradeType   String // "BUY" or "SELL"
  orderType   String // "MARKET" or "LIMIT"
  quantity    Int
  price       Float
  totalAmount Float
  tradeDate   DateTime @default(now())

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  contract OptionContract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([contractId])
}

model OptionHistPrice {
  id             Int      @id @default(autoincrement())
  contractId     Int
  date           DateTime
  openPrice      Float? // o
  highPrice      Float? // h
  lowPrice       Float? // l
  closePrice     Float // c
  volume         Int? // v
  numberOfTrades Int? // n
  vwap           Float? // vw
  createdAt      DateTime @default(now())

  contract OptionContract @relation(fields: [contractId], references: [id])

  @@unique([contractId, date])
  @@index([contractId])
}

model Scenario {
  id              Int      @id @default(autoincrement())
  title           String
  description     String?
  startDate       DateTime
  endDate         DateTime
  startingBalance Decimal  @db.Decimal(10, 2) // <-- two decimal places
  allowedStocks   String[]
  rules           Json?

  participants ScenarioParticipant[]

  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @default(now()) @updatedAt
  ScenarioIntradayPrice    ScenarioIntradayPrice[]
  ScenarioAttemptAnalytics ScenarioAttemptAnalytics[]
  ScenarioPersonalBest     ScenarioPersonalBest[]
  ScenarioAttempt          ScenarioAttempt[]
}

model ScenarioParticipant {
  id          Int      @id @default(autoincrement())
  scenarioId  Int
  userId      Int
  joinedAt    DateTime @default(now())
  finalRank   Int?
  cashBalance Decimal  @default(0) @db.Decimal(10, 2)
  ended       Boolean  @default(false)

  scenario Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  ScenarioMarketOrder ScenarioMarketOrder[]
  ScenarioLimitOrder  ScenarioLimitOrder[]
  ScenarioHolding     ScenarioHolding[]
}

model ScenarioMarketOrder {
  id            Int      @id @default(autoincrement())
  participantId Int
  side          String
  symbol        String
  quantity      Decimal
  executedPrice Decimal
  status        String   @default("EXECUTED")
  createdAt     DateTime @default(now())
  currentIndex  Int?

  participant ScenarioParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)
}

model ScenarioLimitOrder {
  id            Int                 @id @default(autoincrement())
  participantId Int
  participant   ScenarioParticipant @relation(fields: [participantId], references: [id])
  side          String
  symbol        String
  quantity      Int
  limitPrice    Float
  orderType     String
  status        String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  currentIndex  Int? // <-- the index when user placed the order
  executedIndex Int? // <-- the index when order executed (if executed)
}

model ScenarioReplayProgress {
  id         Int      @id @default(autoincrement())
  userId     Int
  scenarioId Int
  symbol     String
  lastIndex  Int      @default(0)
  speed      Float    @default(1)
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())

  @@unique([userId, scenarioId, symbol])
}

model ScenarioIntradayPrice {
  id         Int      @id @default(autoincrement())
  scenarioId Int
  symbol     String
  date       DateTime
  openPrice  Decimal? @db.Decimal(10, 2)
  highPrice  Decimal? @db.Decimal(10, 2)
  lowPrice   Decimal? @db.Decimal(10, 2)
  closePrice Decimal  @db.Decimal(10, 2)
  volume     BigInt?
  createdAt  DateTime @default(now())

  scenario Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

  @@unique([scenarioId, symbol, date]) // one row per symbol per date per scenario
  @@index([scenarioId])
  @@index([symbol])
}

model ScenarioHolding {
  id            Int    @id @default(autoincrement())
  participantId Int
  symbol        String
  quantity      Int    @default(0)

  participant ScenarioParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([participantId, symbol]) // ensures one row per participant per stock
  @@index([participantId])
  @@index([symbol])
}

model ScenarioAttemptAnalytics {
  id            Int      @id @default(autoincrement())
  userId        Int
  scenarioId    Int
  attemptNumber Int
  summary       Json // {openShares, totalShares, invested, unrealizedPnL, realizedPnL, totalPnL}
  positions     Json // array of position snapshots
  createdAt     DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  scenario Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

  @@unique([userId, scenarioId, attemptNumber])
  @@index([scenarioId])
  @@index([userId])
}

model ScenarioPersonalBest {
  id                Int      @id @default(autoincrement())
  userId            Int
  scenarioId        Int
  // which attempt achieved the PB (useful for debugging / replay links)
  bestAttemptNumber Int
  // canonical metrics
  bestTotalValue    Decimal  @db.Decimal(14, 2) // wallet + invested + realized + unrealized at finish
  bestReturnPct     Decimal  @db.Decimal(7, 4) // (bestTotalValue - startingBalance) / startingBalance
  bestRealizedPnL   Decimal  @db.Decimal(14, 2)
  bestUnrealizedPnL Decimal  @db.Decimal(14, 2)
  achievedAt        DateTime @default(now())

  // relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  scenario Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

  @@unique([userId, scenarioId]) // one PB per (user, scenario)
  @@index([scenarioId, userId])
}

model ScenarioAttempt {
  id            Int                   @id @default(autoincrement())
  scenarioId    Int
  userId        Int
  attemptNumber Int
  startedAt     DateTime              @default(now())
  endedAt       DateTime?
  totalValue    Decimal?              @db.Decimal(14, 2)
  realizedPnL   Decimal?              @db.Decimal(14, 2)
  unrealizedPnL Decimal?              @db.Decimal(14, 2)
  returnPct     Decimal?              @db.Decimal(7, 4)
  aiInsights    Json?
  scenario      Scenario              @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  status        ScenarioAttemptStatus @default(NOT_STARTED)

  @@unique([scenarioId, userId, attemptNumber])
  @@index([scenarioId])
  @@index([userId])
}

enum ScenarioAttemptStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model AIAdvice {
  id        Int      @id @default(autoincrement())
  userId    Int
  category  String // "stocks" | "options"
  advice    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model BlockchainTransaction {
  id              Int      @id @default(autoincrement())
  userId          Int
  symbol          String
  tradeType       String
  gasUsed         Float
  transactionHash String
  blockNumber     Int
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OptionBlockchainTransaction {
  id               Int      @id @default(autoincrement())
  userId           Int
  underlyingSymbol String
  optionType       String // "CALL" or "PUT"
  strikePrice      Float
  expirationDate   DateTime
  contracts        Int
  premium          Float // cost per contract × multiplier
  transactionHash  String
  blockNumber      Int
  tradeType        String
  gasUsed          Int
  symbol           String
  createdAt        DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}